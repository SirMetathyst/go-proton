<%: func ComponentEntity_C_1_4_2(c *proton.Context, cp *proton.Component, isEventComponent bool, b *bytes.Buffer) string %>
<%

ID := proton.String("")

if isEventComponent {
    ID = eventComponentID(c, cp)
} else {
    ID = cp.ID()
}

%>
public partial class <%==s c.ID().WithoutContextSuffix().ToUpperFirst().String()%>Entity
{
    public <%==s ID.WithComponentSuffix().ToUpperFirst().String()%><% b.WriteRune(' ')%><%==s ID.WithoutComponentSuffix().ToLowerFirst().String()%>
    {
        get
        {
            return (<%==s ID.WithComponentSuffix().ToUpperFirst().String()%>)GetComponent(<%==s c.ID().WithoutContextSuffix().ToUpperFirst().String()%>ComponentsLookup.<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>);
        }
    }

    public bool has<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>
    {
        get
        {
            return HasComponent(<%==s c.ID().WithoutContextSuffix().ToUpperFirst().String()%>ComponentsLookup.<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>);
        }
    }

    public void Add<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>(<% ComponentEntityArgument_C_1_4_2(cp, isEventComponent, b) %>)
    {
        var index = <%==s c.ID().WithoutContextSuffix().ToUpperFirst().String()%>ComponentsLookup.<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>;
        var component = CreateComponent<<%==s ID.WithComponentSuffix().ToUpperFirst().String()%>>(index);
<% ComponentEntityAssignment_C_1_4_2(cp, isEventComponent, b) %>
        AddComponent(index, component);
    }

    public void Replace<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>(<% ComponentEntityArgument_C_1_4_2(cp, isEventComponent, b) %>)
    {
        var index = <%==s c.ID().WithoutContextSuffix().ToUpperFirst().String()%>ComponentsLookup.<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>;
        var component = CreateComponent<<%==s ID.WithComponentSuffix().ToUpperFirst().String()%>>(index);
<% ComponentEntityAssignment_C_1_4_2(cp, isEventComponent, b) %>
        ReplaceComponent(index, component);
    }

    public void Remove<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>()
    {
        RemoveComponent(<%==s c.ID().WithoutContextSuffix().ToUpperFirst().String()%>ComponentsLookup.<%==s ID.WithoutComponentSuffix().ToUpperFirst().String()%>);
    }
}
<% return b.String() %>
