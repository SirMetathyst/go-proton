// Code generated by hero.
// source: C:\Users\alexa\go\src\github.com\SirMetathyst\proton\generator\component_entity\C_1_4_2\component_entity_flag.tpl
// DO NOT EDIT!
package generator

import (
	"bytes"

	"github.com/SirMetathyst/proton/model"
)

func ComponentEntityFlag_C_1_4_2(c *model.C, cp *model.CP, b *bytes.Buffer) string {
	b.WriteString(`
public partial class `)
	b.WriteString(c.ID().WithoutContextSuffix().ToUpperFirst().String())
	b.WriteString(`Entity 
{
    static readonly `)
	b.WriteString(cp.ID().WithComponentSuffix().ToUpperFirst().String())
	b.WriteRune(' ')
	b.WriteString(cp.ID().WithComponentSuffix().ToLowerFirst().String())
	b.WriteString(` = new `)
	b.WriteString(cp.ID().WithComponentSuffix().ToUpperFirst().String())
	b.WriteString(`();

    public bool `)
	b.WriteString(cp.FlagPrefixOrDefault().ToLowerFirst().String())
	b.WriteString(cp.ID().WithoutComponentSuffix().ToUpperFirst().String())
	b.WriteString(` 
    {
        get 
        { 
            return HasComponent(`)
	b.WriteString(c.ID().WithoutContextSuffix().ToUpperFirst().String())
	b.WriteString(`ComponentsLookup.`)
	b.WriteString(cp.ID().WithoutComponentSuffix().ToUpperFirst().String())
	b.WriteString(`); 
        }
        set 
        {
            if (value != `)
	b.WriteString(cp.FlagPrefixOrDefault().ToLowerFirst().String())
	b.WriteString(cp.ID().WithoutComponentSuffix().ToUpperFirst().String())
	b.WriteString(`) 
            {
                var index = `)
	b.WriteString(c.ID().WithoutContextSuffix().ToUpperFirst().String())
	b.WriteString(`ComponentsLookup.`)
	b.WriteString(cp.ID().WithoutComponentSuffix().ToUpperFirst().String())
	b.WriteString(`;
                if (value) 
                {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : `)
	b.WriteString(cp.ID().WithComponentSuffix().ToLowerFirst().String())
	b.WriteString(`;

                    AddComponent(index, component);
                } 
                else 
                {
                    RemoveComponent(index);
                }
            }
        }
    }
}
`)
	return b.String()

}
