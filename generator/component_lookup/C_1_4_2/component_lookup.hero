<%: func ComponentLookup_C_1_4_2(c *entitas.C, cp []*entitas.CP, b *bytes.Buffer) string %>
public static class <%==s c.ID().WithoutContextSuffix().ToUpperFirst().String()%>ComponentsLookup 
{
<% 
i := 0
ci := 0
for _, ccp := range cp {
    b.WriteString("\tpublic const int ")
    b.WriteString(ccp.ID().WithoutComponentSuffix().ToUpperFirst().String())
    b.WriteString(" = ")
    b.WriteString(strconv.Itoa(i))
    b.WriteString(";\n")
    i++
    ci++

    if ccp.EventTarget() != entitas.NoTarget {
        b.WriteString("\tpublic const int ")
        b.WriteString(eventComponentID(c, ccp).String())
        b.WriteString(" = ")
        b.WriteString(strconv.Itoa(i))
        b.WriteString(";\n")
        i++
        ci++
    }
}%>
    public const int TotalComponents = <%==s strconv.Itoa(i) %>;
	
	public static readonly string[] componentNames = 
    {
<% 
i = 0
for _, ccp := range cp {
    b.WriteString("\t\t\"")
    b.WriteString(ccp.ID().WithoutComponentSuffix().ToUpperFirst().String())
    b.WriteString("\"")
    if i != ci-1 {
        b.WriteString(",\n")
    }
    i++
    if ccp.EventTarget() != entitas.NoTarget {
        b.WriteString("\t\t\"")
        b.WriteString(eventComponentID(c, ccp).String())
        b.WriteString("\"")
        if i != ci-1 {
            b.WriteString(",\n")
        }
        i++
    }
} 
%>
	};
	
	public static readonly System.Type[] componentTypes = 
    {
<% 
i = 0
for _, ccp := range cp {
    b.WriteString("\t\ttypeof(")
    b.WriteString(ccp.ID().WithComponentSuffix().ToUpperFirst().String())
    b.WriteRune(')')
    if i != ci-1 {
        b.WriteString(",\n")
    }
    i++

    if ccp.EventTarget() != entitas.NoTarget {
        b.WriteString("\t\ttypeof(")
        b.WriteString(eventComponentID(c, ccp).WithComponentSuffix().String())
        b.WriteRune(')')
        if i != ci-1 {
            b.WriteString(",\n")
        }
        i++
    }
} 
%>
	};
}
<% return b.String() %>