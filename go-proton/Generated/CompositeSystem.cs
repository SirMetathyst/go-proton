//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Electron:CompositeSystemGenerator_C_1_4_2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// CompositeSystems by Fujito: https://gist.github.com/Fejuto/1dbdcca27a2d25ce3c08bcf2d83d59b7
public class CompositeSystem : Feature 
{
    Entitas.IContexts contexts;

    public CompositeSystem(Entitas.IContexts contexts) 
    {
        this.contexts = contexts;
    }

    public void AddInitialize(System.Action initialize) 
    {
        Add(new InlineInitializeSystem(initialize));
    }

    public void AddExecute(System.Action execute) 
    {
        Add(new InlineExecuteSystem(execute));
    }

    public void AddCleanup(System.Action cleanup) 
    {
        Add(new InlineCleanupSystem(cleanup));
    }

    public void AddTeardown(System.Action tearDown) 
    {
        Add(new InlineTeardownSystem(tearDown));
    }

    public void AddReact<TEntity>(Entitas.IMatcher<TEntity> matcher, bool autoFilter, System.Action<System.Collections.Generic.List<TEntity>> execute) where TEntity : class, Entitas.IEntity 
    {
        AddReact(matcher, e => !autoFilter || matcher.Matches(e), execute);
    }

    public void AddReact<TEntity>(Entitas.IMatcher<TEntity> matcher, System.Func<TEntity, bool> filter, System.Action<System.Collections.Generic.List<TEntity>> execute) where TEntity : class, Entitas.IEntity 
    {
        AddReact(Entitas.CollectorContextExtension.CreateCollector(GetContext<TEntity>(), matcher), filter, execute);
    }

    public void AddReact<TEntity>(System.Func<TEntity, bool> filter, System.Action<System.Collections.Generic.List<TEntity>> execute, params Entitas.TriggerOnEvent<TEntity>[] triggers) where TEntity : class, Entitas.IEntity 
    {
        AddReact(Entitas.CollectorContextExtension.CreateCollector(GetContext<TEntity>(), triggers), filter, execute);
    }

    public void AddReact<TEntity>(Entitas.ICollector<TEntity> collector, System.Func<TEntity, bool> filter, System.Action<System.Collections.Generic.List<TEntity>> execute) where TEntity : class, Entitas.IEntity 
    {
        Add(new InlineReactiveSystem<TEntity>(collector, filter, execute));
    }

    public void AddReactEach<TEntity>(Entitas.IMatcher<TEntity> matcher, bool autoFilter, System.Action<TEntity> execute) where TEntity : class, Entitas.IEntity 
    {
        AddReact(matcher, autoFilter, entities => entities.ForEach(execute));
    }

    public void AddReactEach<TEntity>(Entitas.IMatcher<TEntity> matcher, System.Func<TEntity, bool> filter, System.Action<TEntity> execute) where TEntity : class, Entitas.IEntity 
    {
        AddReact(matcher, filter, entities => entities.ForEach(execute));
    }

    public void AddReactEach<TEntity>(System.Func<TEntity, bool> filter, System.Action<TEntity> execute, params Entitas.TriggerOnEvent<TEntity>[] triggers) where TEntity : class, Entitas.IEntity 
    {
        AddReact(filter, entities => entities.ForEach(execute), triggers);
    }

    public void AddReactEach<TEntity>(Entitas.ICollector<TEntity> collector, System.Func<TEntity, bool> filter, System.Action<TEntity> execute) where TEntity : class, Entitas.IEntity 
    {
        AddReact(collector, filter, entities => entities.ForEach(execute));
    }

    Entitas.IContext<TEntity> GetContext<TEntity>() where TEntity : class, Entitas.IEntity 
    {
        foreach (var c in contexts.allContexts) 
        {
            var context = c as Entitas.IContext<TEntity>;
            if (context != null) return context;
        }
        throw new System.ArgumentException("Context was not valid");
    }

    class InlineInitializeSystem : Entitas.IInitializeSystem 
    {
        System.Action initialize;

        public InlineInitializeSystem(System.Action initialize) 
        {
            this.initialize = initialize;
        }

        public void Initialize() 
        {
            initialize();
        }
    }

    class InlineExecuteSystem : Entitas.IExecuteSystem 
    {
        System.Action execute;

        public InlineExecuteSystem(System.Action execute) 
        {
            this.execute = execute;
        }

        public void Execute() 
        {
            execute();
        }
    }

    class InlineCleanupSystem : Entitas.ICleanupSystem 
    {
        System.Action cleanup;

        public InlineCleanupSystem(System.Action cleanup) 
        {
            this.cleanup = cleanup;
        }

        public void Cleanup() 
        {
            cleanup();
        }
    }

    class InlineTeardownSystem : Entitas.ITearDownSystem 
    {
        System.Action tearDown;

        public InlineTeardownSystem(System.Action tearDown) 
        {
            this.tearDown = tearDown;
        }

        public void TearDown() 
        {
            tearDown();
        }
    }

    class InlineReactiveSystem<TEntity> : Entitas.ReactiveSystem<TEntity> where TEntity : class, Entitas.IEntity 
    {
        System.Func<TEntity, bool> filter;
        System.Action<System.Collections.Generic.List<TEntity>> execute;

        public InlineReactiveSystem(Entitas.ICollector<TEntity> collector, System.Func<TEntity, bool> filter, System.Action<System.Collections.Generic.List<TEntity>> execute) : base(collector) 
        {
            this.filter = filter;
            this.execute = execute;
        }

        protected override Entitas.ICollector<TEntity> GetTrigger(Entitas.IContext<TEntity> context) 
        {
            throw new System.Exception("should never be called");
        }

        protected override bool Filter(TEntity entity) 
        {
            return filter(entity);
        }

        protected override void Execute(System.Collections.Generic.List<TEntity> entities) 
        {
            execute(entities);
        }
    }
}
