//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Electron:ComponentEntityGenerator_C_1_4_2,ComponentMatcherGenerator_C_1_4_2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

public partial class CoreEntity
{
    public RotationComponent rotation 
    { 
        get 
        { 
            return (RotationComponent)GetComponent(CoreComponentsLookup.Rotation); 
        } 
    }

    public bool hasRotation 
    { 
        get 
        { 
            return HasComponent(CoreComponentsLookup.Rotation); 
        } 
    }

    public void AddRotation(UnityEngine.Vector3 newA, UnityEngine.Vector3 newB, UnityEngine.Vector3 newC) 
    {
        var index = CoreComponentsLookup.Rotation;
        var component = CreateComponent<RotationComponent>(index);
		component.a = newA;
		component.b = newB;
		component.c = newC;
        AddComponent(index, component);
    }

    public void ReplaceRotation(UnityEngine.Vector3 newA, UnityEngine.Vector3 newB, UnityEngine.Vector3 newC)
    {
        var index = CoreComponentsLookup.Rotation;
        var component = CreateComponent<RotationComponent>(index);
		component.a = newA;
		component.b = newB;
		component.c = newC;
        ReplaceComponent(index, component);
    }

    public void RemoveRotation()
    {
        RemoveComponent(CoreComponentsLookup.Rotation);
    }
}

public sealed partial class CoreMatcher
{
    static Entitas.IMatcher<CoreEntity> _matcherRotation;

    public static Entitas.IMatcher<CoreEntity> Rotation 
    {
        get 
        {
            if (_matcherRotation == null) 
            {
                var matcher = (Entitas.Matcher<CoreEntity>)Entitas.Matcher<CoreEntity>.AllOf(CoreComponentsLookup.Rotation);
                matcher.componentNames = CoreComponentsLookup.componentNames;
                _matcherRotation = matcher;
            }

            return _matcherRotation;
        }
    }
}
