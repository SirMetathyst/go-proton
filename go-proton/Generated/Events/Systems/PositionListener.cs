//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Electron:EventSystemGenerator_C_1_6_1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

public sealed class PositionListenerEventSystem : Entitas.ReactiveSystem<CoreEntity> 
{
    readonly System.Collections.Generic.List<IPositionListener> _listenerBuffer;
    
    public PositionListenerEventSystem(Contexts contexts) : base(contexts.core) 
    {
        _listenerBuffer = new System.Collections.Generic.List<IPositionListener>();
    }

    protected override Entitas.ICollector<CoreEntity> GetTrigger(Entitas.IContext<CoreEntity> context) 
    {
        return Entitas.CollectorContextExtension.CreateCollector(
            context, Entitas.TriggerOnEventMatcherExtension.Added(CoreMatcher.Position)
        );
    }

    protected override bool Filter(CoreEntity entity) 
    {
        return entity.hasPosition && entity.hasPositionListener;
    }

    protected override void Execute(System.Collections.Generic.List<CoreEntity> entities) 
    {
        foreach (var e in entities) 
        {
            var component = e.position;

            _listenerBuffer.Clear();
            _listenerBuffer.AddRange(e.positionListener.value);
            foreach (var listener in _listenerBuffer) 
            {
                listener.OnPosition(e, component.a, component.b, component.c);
            }
        }
    }
}
